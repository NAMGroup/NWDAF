/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.19).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.nwdaf.analytics.api;

import io.nwdaf.analytics.model.AnalyticsData;
import io.nwdaf.analytics.model.EventId;
import io.nwdaf.analytics.model.ProblemDetails;
import io.nwdaf.analytics.model.ProblemDetailsAnalyticsInfoRequest;
import io.nwdaf.analytics.model.SupportedFeatures;

import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.sql.Date;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-01-27T12:24:16.086762+02:00[Europe/Athens]")
@Api(value = "analytics", description = "the analytics API")
public interface AnalyticsApi {

    Logger log = LoggerFactory.getLogger(AnalyticsApi.class);

    default Optional<ObjectMapper> getObjectMapper(){
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest(){
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Read a NWDAF Analytics", nickname = "getNWDAFAnalytics", notes = "", response = AnalyticsData.class, authorizations = {
        @Authorization(value = "oAuth2ClientCredentials", scopes = { 
            @AuthorizationScope(scope = "nnwdaf-analyticsinfo", description = "Access to the Nnwdaf_AnalyticsInfo API")
            })    }, tags={ "NWDAF Analytics (Document)", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Containing the analytics with parameters as relevant for the requesting NF service consumer.", response = AnalyticsData.class),
        @ApiResponse(code = 204, message = "No Content (The request NWDAF Analytics data does not exist)"),
        @ApiResponse(code = 400, message = "Bad request", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Indicates that the NWDAF Analytics resource does not exist.", response = ProblemDetails.class),
        @ApiResponse(code = 406, message = "406 Not Acceptable"),
        @ApiResponse(code = 414, message = "URI Too Long", response = ProblemDetails.class),
        @ApiResponse(code = 429, message = "Too Many Requests", response = ProblemDetails.class),
        @ApiResponse(code = 500, message = "The request is rejected by the NWDAF and more details (not only the ProblemDetails) are returned.", response = ProblemDetailsAnalyticsInfoRequest.class),
        @ApiResponse(code = 503, message = "Service Unavailable", response = ProblemDetails.class),
        @ApiResponse(code = 200, message = "Generic Error") })
    @RequestMapping(value = "/nnwdaf-analyticsinfo/v1/analytics",
        produces = { "application/json", "application/problem+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<AnalyticsData> getNWDAFAnalytics(@NotNull @ApiParam(value = "Identify the analytics.", required = true) @Valid @RequestParam(value = "event-id", required = true) String eventId
,@ApiParam(value = "Identifies the analytics reporting requirement information.") @Valid @RequestParam(value = "ana-req", required = false)  String anaReq
,@ApiParam(value = "Identify the analytics.") @Valid @RequestParam(value = "event-filter", required = false)  String eventFilter
,@ApiParam(value = "To filter irrelevant responses related to unsupported features") @Valid @RequestParam(value = "supported-features", required = false) String supportedFeatures
,@ApiParam(value = "Identify the target UE information.") @Valid @RequestParam(value = "tgt-ue", required = false)  String tgtUe
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                //Initialization of the response body
            	AnalyticsData responseBuilder = new AnalyticsData(); 
                responseBuilder.setTimeStampGen(OffsetDateTime.now());
            	
            	
                //Check if the given event-id is valid
                EventId requestedEventId = new EventId(eventId);
								
				//Check if the requested supported features are valid and add them to the response body
                SupportedFeatures requestedSupportedFeatures = null;
                if(supportedFeatures!=null) {
					requestedSupportedFeatures = new SupportedFeatures(supportedFeatures);
					responseBuilder.setSuppFeat(requestedSupportedFeatures.getSupportedFeaturesHex());
					responseBuilder.setSuppFeatString(requestedSupportedFeatures);
				}
				
				if(tgtUe!=null) {
					System.out.println("aaaa");
				}

				return new ResponseEntity<>(responseBuilder, HttpStatus.NO_CONTENT);
				
            }
        } 
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
